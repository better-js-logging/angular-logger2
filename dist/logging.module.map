{"version":3,"file":"logging.module.js","sources":["webpack:///webpack/bootstrap 176937527f570d2f1b85","webpack:///external \"@angular/core\"","webpack:///src/logging.types.ts","webpack:///src/logging.service.ts","webpack:///src/console.ts","webpack:///src/logging.logger.ts","webpack:///src/logging.module.ts","webpack:///external \"moment\"","webpack:///external \"sprintf-js\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 176937527f570d2f1b85","module.exports = @angular/core;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@angular/core\"\n// module id = 0\n// module chunks = 0","export class LoggingConfig {\r\n    constructor(public prefixPattern: string,\r\n                public datetimePattern: string,\r\n                public datetimeLocale: string,\r\n                public contextLogLevels: Array<ContextLogLevel>) {\r\n    }\r\n}\r\n\r\nexport class LogLevel {\r\n    public static TRACE = new LogLevel('TRACE', 4);\r\n    public static DEBUG = new LogLevel('DEBUG', 3);\r\n    public static INFO = new LogLevel('INFO', 2);\r\n    public static WARN = new LogLevel('WARN', 1);\r\n    public static ERROR = new LogLevel('ERROR', 0);\r\n    public static OFF = new LogLevel('OFF', -1);\r\n    \r\n    constructor(public readonly name: string, public readonly level: number) {\r\n    }\r\n}\r\n\r\nexport class ContextLogLevel {\r\n    constructor(public readonly context: string,\r\n                public readonly logLevel: LogLevel) {\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// src/logging.types.ts","import {Inject, Injectable, Optional} from \"@angular/core\";\r\nimport {ContextLogLevel, LoggingConfig, LogLevel} from \"./logging.types\";\r\nimport {Logger} from \"./logging.logger\";\r\n\r\n@Injectable()\r\nexport class LoggingService {\r\n    private static readonly DEFAULT_CONFIG: LoggingConfig = new LoggingConfig(\r\n        '%s::[%s]> ',\r\n        window.navigator.language || 'en',\r\n        'LLL',\r\n        [new ContextLogLevel('*', LogLevel.TRACE)]\r\n    );\r\n    \r\n    \r\n    constructor(@Inject('loggingConfig') @Optional() private readonly config?: LoggingConfig) {\r\n        this.config = new LoggingConfig(\r\n            config.prefixPattern || LoggingService.DEFAULT_CONFIG.prefixPattern,\r\n            config.datetimePattern || LoggingService.DEFAULT_CONFIG.datetimePattern,\r\n            config.datetimeLocale || LoggingService.DEFAULT_CONFIG.datetimeLocale,\r\n            config.contextLogLevels || LoggingService.DEFAULT_CONFIG.contextLogLevels);\r\n    }\r\n    \r\n    \r\n    getLogger(context: string, prefixPattern?: string, datetimeLocale?: string, datetimePattern?: string, logLevel?: LogLevel): Logger {\r\n        return new Logger(context, new LoggingConfig(\r\n            prefixPattern || this.config.prefixPattern,\r\n            datetimePattern || this.config.datetimePattern,\r\n            datetimeLocale || this.config.datetimeLocale,\r\n            (logLevel && [new ContextLogLevel(context, logLevel)]) || this.config.contextLogLevels));\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// src/logging.service.ts","export default function requireConsole(): { log, info, debug, warn, error } {\r\n    const noop: () => void = () => null;\r\n    return (typeof(console) !== 'undefined') ? console :\r\n        {log: noop, info: noop, debug: noop, warn: noop, error: noop};\r\n}\n\n\n// WEBPACK FOOTER //\n// src/console.ts","import sprintf from \"sprintf-js\";\r\nimport * as moment from \"moment\";\r\nimport {ContextLogLevel, LoggingConfig, LogLevel} from \"./logging.types\";\r\nimport requireConsole from \"./console\";\r\n\r\nclass LoggerBase {\r\n    protected log(loggingFunc, level: LogLevel, context, config): Array<any> {\r\n        config.logLevels = config.logLevels || [];\r\n        if (this.levelPassesThreshold(context, level, config)) {\r\n            const enhancedArguments = this.enhanceLogline(arguments, context, level, config.datetimePattern, config.datetimeLocale, config.prefixPattern);\r\n            loggingFunc.apply(null, enhancedArguments);\r\n            return enhancedArguments; // return for testing purposes\r\n        }\r\n        else {\r\n            return null; // no log produced\r\n        }\r\n    };\r\n    \r\n    private levelPassesThreshold(context, level, config): boolean {\r\n        return level > LogLevel.OFF.level && level <= this.getLogLevelThreshold(context, config);\r\n    }\r\n    \r\n    private getLogLevelThreshold(context: string, config: LoggingConfig): LogLevel {\r\n        if (context) {\r\n            const logLevelForContext: ContextLogLevel = this.findLogLevelForContext(config.contextLogLevels, context);\r\n            if (logLevelForContext) {\r\n                return logLevelForContext.logLevel;\r\n            } else if (context.indexOf('.') !== -1) {\r\n                return this.getLogLevelThreshold(context.substring(0, context.lastIndexOf('.')), config);\r\n            }\r\n        }\r\n        const catchAll: ContextLogLevel = this.findLogLevelForContext(config.contextLogLevels, '*');\r\n        return (catchAll && catchAll.logLevel) || LogLevel.TRACE;\r\n    }\r\n    \r\n    private findLogLevelForContext(contextLogLevels: Array<ContextLogLevel>, context: string): ContextLogLevel {\r\n        return contextLogLevels.find((c: ContextLogLevel) => c.context == context);\r\n    }\r\n    \r\n    private enhanceLogline(args, context: string, level: LogLevel, datetimePattern: string, datetimeLocale: string, prefixPattern: string) {\r\n        const prefix = this.generatePrefix(context, level, datetimePattern, datetimeLocale, prefixPattern);\r\n        const processedArgs = maybeApplySprintf([].slice.call(args));\r\n        return [prefix].concat([].slice.call(processedArgs));\r\n        \r\n        function maybeApplySprintf(args) {\r\n            const sprintfAvailable: boolean = typeof sprintf !== 'undefined';\r\n            const sprintfCandidate = sprintfAvailable && args.length >= 2 && typeof args[0] === 'string' && args[0].indexOf('%') !== -1;\r\n            if (sprintfCandidate) {\r\n                try {\r\n                    // apply sprintf with the proper arguments\r\n                    const placeholderCount = this.countSprintfHolders(args[0]);\r\n                    if (placeholderCount > 0) {\r\n                        args[0] = sprintf.apply(null, args);\r\n                        args.splice(1, placeholderCount); // remove arguments consumed by sprintf\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // invalid arguments passed into sprintf, continue without applying\r\n                    args.unshift(e);\r\n                }\r\n            }\r\n            \r\n            return args;\r\n        }\r\n    }\r\n    \r\n    private generatePrefix(context: string, level: LogLevel, datetimePattern: string, datetimeLocale: string, prefixPattern: string) {\r\n        let dateStr: string = '';\r\n        if (typeof moment !== 'undefined') {\r\n            dateStr = moment().locale(datetimeLocale).format(datetimePattern);\r\n        } else {\r\n            const d: Date = new Date();\r\n            const timeStr: string = new Date().toTimeString().match(/^([0-9]{2}:[0-9]{2}:[0-9]{2})/)[0];\r\n            dateStr = d.getDate() + '-' + (d.getMonth() + 1) + '-' + d.getFullYear() + ' ' + timeStr;\r\n        }\r\n        \r\n        if (typeof sprintf !== 'undefined') {\r\n            return sprintf(prefixPattern, dateStr, context, level.name.toLowerCase());\r\n        } else {\r\n            // use fixed layout: '%s::[%s]%s> '\r\n            return dateStr + '::' + context + '::' + level.name.toLowerCase() + '> ';\r\n        }\r\n    }\r\n    \r\n    private countSprintfHolders = function (pattern) {\r\n        const hasNamedHolders = /\\x25\\([a-zA-Z0-9_]+\\)[b-fijosuxX]/.test(pattern);\r\n        if (hasNamedHolders) {\r\n            return 1;\r\n        }\r\n        \r\n        let placeholderCounter = 0;\r\n        \r\n        function f(index) {\r\n            return function () {\r\n                // keep track of highest arg index, needed for single -but indexed- placeholders placeholder (ie. %6$s consumes the first 6 arguments)\r\n                placeholderCounter = Math.max(placeholderCounter, index);\r\n            };\r\n        }\r\n        \r\n        sprintf(pattern, f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10));\r\n        return placeholderCounter;\r\n    };\r\n}\r\n\r\nexport class Logger extends LoggerBase {\r\n    \r\n    private static console: { log, info, debug, warn, error } = requireConsole();\r\n    \r\n    constructor(private readonly context: string,\r\n                private readonly config: LoggingConfig) {\r\n        super();\r\n    }\r\n    \r\n    readonly trace: () => Array<any> = () => this.log(Logger.console.debug, LogLevel.DEBUG, this.context, this.config);\r\n    readonly debug: () => Array<any> = () => this.log(Logger.console.debug, LogLevel.DEBUG, this.context, this.config);\r\n    readonly info: () => Array<any> = () => this.log(Logger.console.info, LogLevel.INFO, this.context, this.config);\r\n    readonly warn: () => Array<any> = () => this.log(Logger.console.warn, LogLevel.WARN, this.context, this.config);\r\n    readonly error: () => Array<any> = () => this.log(Logger.console.error, LogLevel.ERROR, this.context, this.config);\r\n    \r\n    \r\n}\n\n\n// WEBPACK FOOTER //\n// src/logging.logger.ts","import {NgModule, enableProdMode} from '@angular/core'\nimport {LoggingService} from './logging.service'\n\nenableProdMode();\n\n@NgModule({\n    providers: [LoggingService]\n})\n\nexport class LoggingModule {\n\n}\n\n\n// WEBPACK FOOTER //\n// src/logging.module.ts","module.exports = moment;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"moment\"\n// module id = 6\n// module chunks = 0","module.exports = sprintf-js;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"sprintf-js\"\n// module id = 7\n// module chunks = 0"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;AChEA;;;;;;;;;ACAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AANA;AAQA;AAQA;AAAA;AAAA;AACA;AACA;AAAA;AATA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAJA;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AAGA;AASA;AAAA;AACA;AAKA;AAGA;AACA;AAKA;AACA;AAAA;AAxBA;AADA;AADA;AAUA;AAAA;AATA;AAAA;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AAJA;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AAEA;AAAA;AA+EA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAhGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAoBA;AAAA;AAEA;AAAA;AAIA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;;AANA;AASA;AAAA;AAdA;AAFA;;;;;;;;;;;;;;;;ACxGA;AACA;AAEA;AAMA;AAAA;AAEA;AAAA;AAAA;AAFA;AAJA;AACA;AACA;AAEA;AAAA;;;;;;;ACTA;;;;;;ACAA;;;A","sourceRoot":""}