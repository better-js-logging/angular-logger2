{"version":3,"sources":["webpack://AngularLogger2/webpack/universalModuleDefinition","webpack://AngularLogger2/webpack/bootstrap","webpack://AngularLogger2/./src/logging.types.ts","webpack://AngularLogger2/external {\"root\":[\"ng\",\"core\"],\"commonjs\":\"@angular/core\",\"commonjs2\":\"@angular/core\",\"amd\":\"@angular/core\"}","webpack://AngularLogger2/./src/logging.logger.ts","webpack://AngularLogger2/./src/logging.service.ts","webpack://AngularLogger2/./src/console.ts","webpack://AngularLogger2/external \"moment\"","webpack://AngularLogger2/external \"sprintf-js\"","webpack://AngularLogger2/./src/logging.module.ts","webpack://AngularLogger2/./src/index.ts"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__5__","__WEBPACK_EXTERNAL_MODULE__6__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","core_1","LoggingConfig","prefixPattern","datetimePattern","datetimeLocale","contextLogLevels","this","__decorate","Injectable","Array","LogLevel","level","TRACE","DEBUG","INFO","WARN","ERROR","OFF","ContextLogLevel","context","logLevel","sprintfjs","sprintf","moment","logging_types_1","console_1","LoggerBase","log","args","loggingFunc","config","levelPassesThreshold","enhancedArguments","enhanceLogline","apply","getLogLevelThreshold","logLevelForContext","findLogLevelForContext","indexOf","substring","lastIndexOf","catchAll","find","prefix","generatePrefix","processedArgs","maybeApplySprintf","slice","concat","sprintfAvailable","sprintfCandidate","length","placeholderCount","countSprintfHolders","splice","e","unshift","dateStr","locale","format","Date","timeStr","toTimeString","match","getDate","getMonth","getFullYear","toLowerCase","pattern","hasNamedHolders","test","placeholderCounter","f","index","Math","max","Logger","_super","__extends","_this","trace","message","rest","_i","arguments","console","debug","info","warn","error","default","logging_logger_1","LoggingService","LoggingService_1","DEFAULT_CONFIG","getLogger","createRandomName","createRandomWord","consonants","split","vowels","rand","limit","floor","random","word","randConsonant","randVowel","toUpperCase","navigator","language","__param","Inject","Optional","requireConsole","noop","logging_service_1","LoggingModule","NgModule","providers","__export"],"mappings":"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","file":"angular-logger2.umd.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@angular/core\"), require(\"moment\"), require(\"sprintf-js\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"AngularLogger2\", [\"@angular/core\", \"moment\", \"sprintf-js\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"AngularLogger2\"] = factory(require(\"@angular/core\"), require(\"moment\"), require(\"sprintf-js\"));\n\telse\n\t\troot[\"AngularLogger2\"] = factory(root[\"ng\"][\"core\"], root[\"moment\"], root[\"sprintf-js\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__1__, __WEBPACK_EXTERNAL_MODULE__5__, __WEBPACK_EXTERNAL_MODULE__6__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","import {Injectable} from '@angular/core';\r\n\r\n@Injectable()\r\nexport class LoggingConfig {\r\n    constructor(public prefixPattern?: string,\r\n                public datetimePattern?: string,\r\n                public datetimeLocale?: string,\r\n                public contextLogLevels?: Array<ContextLogLevel>) {\r\n    }\r\n}\r\n\r\nexport class LogLevel {\r\n    public static TRACE = new LogLevel('TRACE', 4);\r\n    public static DEBUG = new LogLevel('DEBUG', 3);\r\n    public static INFO  = new LogLevel('INFO', 2);\r\n    public static WARN  = new LogLevel('WARN', 1);\r\n    public static ERROR = new LogLevel('ERROR', 0);\r\n    public static OFF   = new LogLevel('OFF', -1);\r\n    \r\n    constructor(public readonly name: string, public readonly level: number) {\r\n    }\r\n}\r\n\r\nexport class ContextLogLevel {\r\n    constructor(public readonly context: string,\r\n                public readonly logLevel: LogLevel) {\r\n    }\r\n}","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","import * as sprintfjs from 'sprintf-js';\r\nconst sprintf = sprintfjs.sprintf;\r\nimport * as moment from 'moment';\r\nimport {ContextLogLevel, LoggingConfig, LogLevel} from './logging.types';\r\nimport requireConsole from './console';\r\n\r\nexport class LoggerBase {\r\n    protected log(args: IArguments, loggingFunc, level: LogLevel, context, config): Array<any> {\r\n        if (this.levelPassesThreshold(context, level, config)) {\r\n            const enhancedArguments = this.enhanceLogline(args, context, level, config);\r\n            loggingFunc.apply(null, enhancedArguments);\r\n            return enhancedArguments; // return for testing purposes\r\n        } else {\r\n            return null; // no log produced\r\n        }\r\n    }\r\n    \r\n    private levelPassesThreshold(context: string, logLevel: LogLevel, config: LoggingConfig): boolean {\r\n        return logLevel.level > LogLevel.OFF.level && logLevel.level <= this.getLogLevelThreshold(context, config).level;\r\n    }\r\n    \r\n    private getLogLevelThreshold(context: string, config: LoggingConfig): LogLevel {\r\n        if (context) {\r\n            const logLevelForContext: ContextLogLevel = this.findLogLevelForContext(config.contextLogLevels, context);\r\n            if (logLevelForContext) {\r\n                return logLevelForContext.logLevel;\r\n            } else if (context.indexOf('.') !== -1) {\r\n                return this.getLogLevelThreshold(context.substring(0, context.lastIndexOf('.')), config);\r\n            }\r\n        }\r\n        const catchAll: ContextLogLevel = this.findLogLevelForContext(config.contextLogLevels, '*');\r\n        return (catchAll && catchAll.logLevel) || LogLevel.TRACE;\r\n    }\r\n    \r\n    private findLogLevelForContext(contextLogLevels: Array<ContextLogLevel>, context: string): ContextLogLevel {\r\n        return contextLogLevels.find((c: ContextLogLevel) => c.context == context);\r\n    }\r\n    \r\n    private enhanceLogline(args, context: string, logLevel: LogLevel, config: LoggingConfig) {\r\n        const prefix = this.generatePrefix(context, logLevel, config);\r\n        const processedArgs = this.maybeApplySprintf([].slice.call(args));\r\n        return [prefix].concat([].slice.call(processedArgs));\r\n    }\r\n    \r\n    private maybeApplySprintf(args: any[]) {\r\n        const sprintfAvailable: boolean = typeof sprintf !== 'undefined';\r\n        const sprintfCandidate = sprintfAvailable && args.length >= 2 && typeof args[0] === 'string' && args[0].indexOf('%') !== -1;\r\n        if (sprintfCandidate) {\r\n            try {\r\n                // apply sprintf with the proper arguments\r\n                const placeholderCount = this.countSprintfHolders(args[0]);\r\n                if (placeholderCount > 0) {\r\n                    args[0] = sprintf.apply(null, args);\r\n                    args.splice(1, placeholderCount); // remove arguments consumed by sprintf\r\n                }\r\n            } catch (e) {\r\n                // invalid arguments passed into sprintf, continue without applying\r\n                args.unshift(e);\r\n            }\r\n        }\r\n        \r\n        return args;\r\n    }\r\n    \r\n    private generatePrefix(context: string, level: LogLevel, config: LoggingConfig) {\r\n        let dateStr: string = '';\r\n        if (typeof moment !== 'undefined') {\r\n            dateStr = moment().locale(config.datetimeLocale).format(config.datetimePattern);\r\n        } else {\r\n            const d: Date = new Date();\r\n            const timeStr: string = new Date().toTimeString().match(/^([0-9]{2}:[0-9]{2}:[0-9]{2})/)[0];\r\n            dateStr = d.getDate() + '-' + (d.getMonth() + 1) + '-' + d.getFullYear() + ' ' + timeStr;\r\n        }\r\n        \r\n        if (typeof sprintf !== 'undefined') {\r\n            return sprintf(config.prefixPattern, dateStr, context, level.name.toLowerCase());\r\n        } else {\r\n            // use fixed layout: '%s::[%s]%s> '\r\n            return dateStr + '::' + context + '::' + level.name.toLowerCase() + '> ';\r\n        }\r\n    }\r\n    \r\n    private countSprintfHolders(pattern: string) {\r\n        const hasNamedHolders = /\\x25\\([a-zA-Z0-9_]+\\)[b-fijosuxX]/.test(pattern);\r\n        if (hasNamedHolders) {\r\n            return 1;\r\n        }\r\n        \r\n        let placeholderCounter = 0;\r\n        \r\n        function f(index: number) {\r\n            // keep track of highest arg index, needed for single -but indexed- placeholders placeholder (ie. %6$s consumes the first 6 arguments)\r\n            return (): any => placeholderCounter = Math.max(placeholderCounter, index);\r\n        }\r\n        \r\n        // this scary approach makes use of sprintf's function argument style, so we can check  how many arguments\r\n        // sprintf is trying to fill in by calling our function f(). Then we know how many placeholders there are.\r\n        sprintf(pattern, f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10));\r\n        return placeholderCounter;\r\n    }\r\n}\r\n\r\nexport class Logger extends LoggerBase {\r\n    \r\n    private static console: { trace, debug, info, warn, error } = requireConsole();\r\n    \r\n    constructor(private readonly context: string,\r\n                private readonly config: LoggingConfig) {\r\n        super();\r\n    }\r\n    \r\n    trace(message?: any, ...rest: any[]): Array<any> {\r\n        return this.log(arguments, function() { Logger.console.trace.apply(Logger.console, arguments) }, LogLevel.TRACE, this.context, this.config);\r\n    }\r\n    \r\n    debug(message?: any, ...rest: any[]): Array<any> {\r\n        return this.log(arguments, function() { Logger.console.debug.apply(Logger.console, arguments) }, LogLevel.DEBUG, this.context, this.config);\r\n    }\r\n    \r\n    info(message?: any, ...rest: any[]): Array<any> {\r\n        return this.log(arguments, function() { Logger.console.info.apply(Logger.console, arguments) }, LogLevel.INFO, this.context, this.config);\r\n    }\r\n    \r\n    warn(message?: any, ...rest: any[]): Array<any> {\r\n        return this.log(arguments, function() { Logger.console.warn.apply(Logger.console, arguments) }, LogLevel.WARN, this.context, this.config);\r\n    }\r\n    \r\n    error(message?: any, ...rest: any[]): Array<any> {\r\n        return this.log(arguments, function() { Logger.console.error.apply(Logger.console, arguments) }, LogLevel.ERROR, this.context, this.config);\r\n    }\r\n}","import {Inject, Injectable, Optional} from '@angular/core';\r\nimport {ContextLogLevel, LoggingConfig, LogLevel} from './logging.types';\r\nimport {Logger} from './logging.logger';\r\n\r\n@Injectable()\r\nexport class LoggingService {\r\n    private static readonly DEFAULT_CONFIG: LoggingConfig = new LoggingConfig(\r\n        '%s::[%s]> ',\r\n        'LLL',\r\n        window.navigator.language || 'en',\r\n        [new ContextLogLevel('*', LogLevel.TRACE)]\r\n    );\r\n    \r\n    /**\r\n     * Convenience method to quickly retrieve a logger without going through Angular first (also missing out on default config provided through Angular).\r\n     */\r\n    static getLogger(context?: string, prefixPattern?: string, datetimeLocale?: string, datetimePattern?: string, logLevel?: LogLevel): Logger {\r\n        return new LoggingService().getLogger(context, prefixPattern, datetimeLocale, datetimePattern, logLevel);\r\n    }\r\n    \r\n    constructor(@Inject(LoggingConfig) @Optional() private readonly config?: LoggingConfig) {\r\n        if (config && typeof(console) !== 'undefined' && console && console.debug) {\r\n            console.debug('creating new LoggingService with injected config:', config);\r\n        }\r\n        this.config = new LoggingConfig(\r\n            (config && config.prefixPattern) || LoggingService.DEFAULT_CONFIG.prefixPattern,\r\n            (config && config.datetimePattern) || LoggingService.DEFAULT_CONFIG.datetimePattern,\r\n            (config && config.datetimeLocale) || LoggingService.DEFAULT_CONFIG.datetimeLocale,\r\n            (config && config.contextLogLevels) || LoggingService.DEFAULT_CONFIG.contextLogLevels);\r\n    }\r\n    \r\n    getLogger(context: string = this.createRandomName(), prefixPattern?: string, datetimeLocale?: string, datetimePattern?: string, logLevel?: LogLevel): Logger {\r\n        return new Logger(context, new LoggingConfig(\r\n            prefixPattern || this.config.prefixPattern,\r\n            datetimePattern || this.config.datetimePattern,\r\n            datetimeLocale || this.config.datetimeLocale,\r\n            (logLevel && [new ContextLogLevel(context, logLevel)]) || this.config.contextLogLevels));\r\n    }\r\n    \r\n    private createRandomName(): string {\r\n        return this.createRandomWord(5) + ' ' + this.createRandomWord(5);\r\n    }\r\n    \r\n    /**\r\n     * Updated version of: https://j11y.io/javascript/random-word-generator/\r\n     */\r\n    private createRandomWord(length: number): string {\r\n        const consonants: string[] = 'bcdfghjklmnpqrstvwxyz'.split('');\r\n        const vowels: string[] = 'aeiou'.split('');\r\n        const rand: (number) => number = (limit) => Math.floor(Math.random() * limit);\r\n        let word = '';\r\n        for (let i = 0; i < length / 2; i++) {\r\n            const randConsonant = consonants[rand(consonants.length)];\r\n            const randVowel = vowels[rand(vowels.length)];\r\n            word += (i === 0) ? randConsonant.toUpperCase() : randConsonant;\r\n            word += i * 2 < length - 1 ? randVowel : '';\r\n        }\r\n        return word;\r\n    }\r\n}\r\n","export default function requireConsole(): { trace, info, debug, warn, error } {\r\n    const noop: () => void = () => null;\r\n    return (typeof(console) !== 'undefined') ? console :\r\n        {trace: noop, debug: noop, info: noop, warn: noop, error: noop};\r\n}","module.exports = __WEBPACK_EXTERNAL_MODULE__5__;","module.exports = __WEBPACK_EXTERNAL_MODULE__6__;","import {NgModule} from '@angular/core';\nimport {LoggingService} from './logging.service';\n\n@NgModule({\n    providers: [LoggingService]\n})\n\nexport class LoggingModule {\n\n}","export * from './logging.module';\r\nexport * from './logging.types';\r\nexport * from './logging.logger';\r\nexport * from './logging.service';"],"sourceRoot":""}